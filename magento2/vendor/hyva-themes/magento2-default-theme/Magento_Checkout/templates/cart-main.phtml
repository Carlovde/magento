<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\Cart\CheckoutConfig;
use Magento\Checkout\Block\Cart;
use Magento\Framework\Escaper;

/** @var Cart $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */
?>

<?php
/** @var CheckoutConfig $checkoutConfigViewModel */
$checkoutConfigViewModel = $viewModels->require(CheckoutConfig::class);
$serializedCheckoutConfig =  $block->getItemsCount() ? $checkoutConfigViewModel->getSerializedCheckoutConfig() : 'false';

?>
<script>
    window.checkoutConfig = <?= /* @noEscape  */ $serializedCheckoutConfig ?>;
    window.customerData = window.checkoutConfig.customerData;
    window.isCustomerLoggedIn = window.checkoutConfig.isCustomerLoggedIn;
</script>

<script>
    'use strict';
    (function( hyva, undefined ) {

        let controller = new AbortController();

        /**
         * Takes a form element and submits it through fetch,
         * then replaces the result into the document without
         * refreshing the page
         */
        hyva.postCart = (form) => {
            if (!form.action) {
                return;
            }
            window.dispatchEvent(new CustomEvent("cart-is-loading", { detail: {
                isLoading: true
            }}));
            controller.abort();
            controller = new AbortController();

            const action = form.action;
            const formData = new FormData(form);

            if (!formData.uenc) {
                formData.append('uenc', hyva.getUenc());
            }

            formData.append('form_key', hyva.getFormKey());

            window.fetch(action, {
                method: 'POST',
                body: formData,
                signal: controller.signal
            }).then((result) => {
                return result.text()
            }).then((content) => {

                hyva.replaceDomElement('#maincontent', content)

            }).catch((error) => {
                if (error.name !== 'AbortError') {
                    console.error(error);
                    typeof window.dispatchMessages !== "undefined" && window.dispatchMessages(
                        [{
                            type: "error",
                            text: "<?= $escaper->escapeJs(__("Something went wrong. Please try again.")) ?>"
                        }], 10000
                    );
                }
            }).finally(() => {
                window.dispatchEvent(new CustomEvent("cart-is-loading", { detail: {
                    isLoading: false
                }}));
            })
        }
    }( window.hyva = window.hyva || {} ));
</script>

<script>

    function initCartForm() {
        let cartIsReloading = false;

        return {
            cartIsEmpty: window.checkoutConfig === false,
            isLoading: false,
            checkCartShouldUpdate(data) {
                const cart = data.cart;
                if (!cart) return;

                const cartIsEmptyState = window.checkoutConfig === false;
                if (this.cartIsEmpty !== cartIsEmptyState) {
                    this.cartIsEmpty = cartIsEmptyState;

                    this.reloadCartContent();
                    return;
                }

                if (this.cartIsEmpty) return;

                if (!cart.items) {
                    this.reloadCartContent();
                    return;
                }

                if (!window.checkoutConfig && cart.items.length) {
                    this.reloadCartContent();
                    return;
                }

                const roundUp = (number) => Math.round(number * 1000);
                const decimalNumbersAreEqual = (number1, number2) => roundUp(number1) === roundUp(number2);

                if (decimalNumbersAreEqual(
                    cart.items.reduce((totalQty, cartItem) => totalQty + cartItem.qty, 0),
                        window.checkoutConfig.quoteData.items_qty
                    ) &&
                    decimalNumbersAreEqual(
                        cart.subtotalAmount,
                        window.checkoutConfig.totalsData.total_segments.find((segment) => segment.code === "subtotal").value
                    )
                ) {
                    return;
                }

                this.reloadCartContent();
            },
            reloadCartContent() {
                if (cartIsReloading) return;
                cartIsReloading = true;

                window.fetch(window.location.href, {
                    method: "GET"
                })
                .then((result) => result.text())
                .then((body) => {
                    hyva.setCookie('mage-cache-sessid', '', -1, true);
                    window.checkoutConfig = null;
                    hyva.replaceDomElement('#maincontent', body)

                })
                .catch(() => {
                    if (window.location.search.indexOf('reload=1') > -1) return;
                    window.location = window.location + (window.location.search.length < 1 ? '?' : '&') + 'reload=1'
                })
                .finally(() => {
                    cartIsReloading = false;
                })
            },
            onStorageChange(event) {
                if (event.key === 'private_content_version') {
                    window.dispatchEvent(new CustomEvent("reload-customer-section-data"));
                }
            }
        }
    }
</script>
<section
    x-data="initCartForm()"
    class="cart-form"
    aria-label="<?= $escaper->escapeHtmlAttr(__('Shopping Cart')) ?>"
    @private-content-loaded.window="checkCartShouldUpdate($event.detail.data)"
    @storage.window="onStorageChange($event)"
    @cart-is-loading.window="isLoading = ($event.detail && $event.detail.isLoading) || false"
>
    <?php if ($block->getItemsCount()): ?>
        <?= $block->getChildHtml('with-items') ?>
    <?php else: ?>
        <?= $block->getChildHtml('no-items') ?>
    <?php endif; ?>
    <?= $block->getChildHtml('loading') ?>
</section>
